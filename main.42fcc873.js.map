{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","fieldCells","querySelectorAll","gameScore","messageLose","messageWin","messageStart","board","playGame","score","mergedCells","numFour","tenPercent","numTwo","getRandomNumber","Math","random","generateRandomNumbers","availableCells","i","j","push","row","col","length","randomCell","floor","createField","Array","from","fill","inRange","mergeAndMove","rowChange","colChange","nextRow","nextCol","classList","remove","cellMerged","add","addEventListener","updateBoard","cellMoved","setTimeout","moveRight","canMove","k","youLose","moveLeft","moveDown","moveUp","resetMergedCells","updateCell","cell","value","textContent","className","current","contains","events","pressedKey","key"],"mappings":"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","file":"main.42fcc873.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst fieldCells = document.querySelectorAll('.field_cell');\nconst gameScore = document.querySelector('.game_score');\nconst messageLose = document.querySelector('.message_lose');\nconst messageWin = document.querySelector('.message_win');\nconst messageStart = document.querySelector('.message_start');\nlet board = [];\nlet playGame = true;\nlet score = 0;\nlet mergedCells = [];\nconst numFour = 4;\nconst tenPercent = 0.1;\nconst numTwo = 2;\n\nfunction getRandomNumber() {\n  return Math.random() > tenPercent ? numTwo : numFour;\n}\n\nfunction generateRandomNumbers() {\n  const availableCells = [];\n\n  for (let i = 0; i < numFour; i++) {\n    for (let j = 0; j < numFour; j++) {\n      if (board[i][j] === 0) {\n        availableCells.push({\n          row: i, col: j,\n        });\n      }\n    }\n  }\n\n  if (availableCells.length > 0) {\n    const randomCell\n      = availableCells[Math.floor(Math.random() * availableCells.length)];\n\n    board[randomCell.row][randomCell.col] = getRandomNumber();\n  }\n}\n\nfunction createField() {\n  board = Array.from({ length: numFour }, () => Array(numFour).fill(0));\n\n  mergedCells = Array.from({ length: numFour },\n    () => Array(numFour).fill(false));\n}\n\nfunction inRange(row, col) {\n  return row >= 0 && row < numFour && col >= 0 && col < numFour;\n}\n\nfunction mergeAndMove(row, col, rowChange, colChange) {\n  if (board[row][col] !== 0) {\n    let nextRow = row + rowChange;\n    let nextCol = col + colChange;\n\n    while (inRange(nextRow, nextCol) && board[nextRow][nextCol] === 0) {\n      nextRow += rowChange;\n      nextCol += colChange;\n    }\n\n    if (inRange(nextRow, nextCol) && board[nextRow][nextCol]\n      === board[row][col] && !mergedCells[nextRow][nextCol]) {\n      board[nextRow][nextCol] *= 2;\n      mergedCells[nextRow][nextCol] = true;\n\n      if (board[nextRow][nextCol] === 2048) {\n        messageWin.classList.remove('hidden');\n        playGame = false;\n      }\n      score += board[nextRow][nextCol];\n      board[row][col] = 0;\n\n      const cellMerged = fieldCells[nextRow * numFour + nextCol];\n\n      cellMerged.classList.add('field_cell--merge');\n\n      cellMerged.addEventListener('animationend', () => {\n        cellMerged.classList.remove('field_cell--merge');\n        updateBoard();\n      });\n    } else {\n      nextRow -= rowChange;\n      nextCol -= colChange;\n      board[nextRow][nextCol] = board[row][col];\n\n      if (nextRow !== row || nextCol !== col) {\n        board[row][col] = 0;\n\n        const cellMoved = fieldCells[row * numFour + col];\n\n        cellMoved.classList.add('field_cell--defaultMove');\n\n        if (colChange === 1) {\n          cellMoved.classList.add('field_cell--moveRight');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveRight');\n            updateBoard();\n          }, 200);\n        }\n\n        if (colChange === -1) {\n          cellMoved.classList.add('field_cell--moveLeft');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveLeft');\n            updateBoard();\n          }, 200);\n        }\n\n        if (rowChange === 1) {\n          cellMoved.classList.add('field_cell--moveDown');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveDown');\n            updateBoard();\n          }, 200);\n        }\n\n        if (rowChange === -1) {\n          cellMoved.classList.add('field_cell--moveUp');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveUp');\n            updateBoard();\n          }, 200);\n        }\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  let canMove = false;\n\n  for (let row = 0; row < numFour; row++) {\n    for (let col = numFour - 2; col >= 0; col--) {\n      if (board[row][col] !== 0) {\n        for (let k = col + 1; k < numFour; k++) {\n          if (board[row][k] === 0) {\n            canMove = true;\n            mergeAndMove(row, col, 0, 1);\n            break;\n          } else if (board[row][k] === board[row][col]) {\n            canMove = true;\n            mergeAndMove(row, col, 0, 1);\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    setTimeout(() => {\n      updateBoard();\n      generateRandomNumbers();\n      updateBoard();\n      youLose();\n    }, 200);\n  }\n}\n\nfunction moveLeft() {\n  let canMove = false;\n\n  for (let row = 0; row < numFour; row++) {\n    for (let col = 1; col < numFour; col++) {\n      if (board[row][col] !== 0) {\n        for (let k = col - 1; k >= 0; k--) {\n          if (board[row][k] === 0) {\n            canMove = true;\n            mergeAndMove(row, col, 0, -1);\n            break;\n          } else if (board[row][k] === board[row][col]) {\n            canMove = true;\n            mergeAndMove(row, col, 0, -1);\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    setTimeout(() => {\n      updateBoard();\n      generateRandomNumbers();\n      updateBoard();\n      youLose();\n    }, 200);\n  }\n}\n\nfunction moveDown() {\n  let canMove = false;\n\n  for (let col = 0; col < numFour; col++) {\n    for (let row = numFour - 2; row >= 0; row--) {\n      if (board[row][col] !== 0) {\n        for (let k = row + 1; k < numFour; k++) {\n          if (board[k][col] === 0) {\n            canMove = true;\n            mergeAndMove(row, col, 1, 0);\n            break;\n          } else if (board[k][col] === board[row][col]) {\n            canMove = true;\n            mergeAndMove(row, col, 1, 0);\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    setTimeout(() => {\n      updateBoard();\n      generateRandomNumbers();\n      updateBoard();\n      youLose();\n    }, 200);\n  }\n}\n\nfunction moveUp() {\n  let canMove = false;\n\n  for (let col = 0; col < numFour; col++) {\n    for (let row = 1; row < numFour; row++) {\n      if (board[row][col] !== 0) {\n        for (let k = row - 1; k >= 0; k--) {\n          if (board[k][col] === 0) {\n            canMove = true;\n            mergeAndMove(row, col, -1, 0);\n            break;\n          } else if (board[k][col] === board[row][col]) {\n            canMove = true;\n            mergeAndMove(row, col, -1, 0);\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    setTimeout(() => {\n      updateBoard();\n      generateRandomNumbers();\n      updateBoard();\n      youLose();\n    }, 200);\n  }\n}\n\nfunction resetMergedCells() {\n  mergedCells = Array.from({ length: numFour },\n    () => Array(numFour).fill(false));\n}\n\nfunction updateCell(row, col) {\n  const cell = fieldCells[row * numFour + col];\n  const value = board[row][col];\n\n  gameScore.textContent = score;\n\n  cell.textContent = value || '';\n\n  cell.className = 'field_cell';\n\n  if (value !== 0) {\n    cell.classList.add(`field_cell--${value}`);\n  }\n}\n\nfunction updateBoard() {\n  for (let row = 0; row < numFour; row++) {\n    for (let col = 0; col < numFour; col++) {\n      updateCell(row, col);\n    }\n  }\n}\n\nbutton.addEventListener('click', () => {\n  playGame = true;\n  messageStart.classList.add('hidden');\n\n  if (button.classList.contains('restart')) {\n    score = 0;\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    createField();\n    generateRandomNumbers();\n    generateRandomNumbers();\n    updateBoard();\n  } else {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    playGame = true;\n    createField();\n    generateRandomNumbers();\n    generateRandomNumbers();\n  }\n\n  for (let row = 0; row < numFour; row++) {\n    for (let col = 0; col < numFour; col++) {\n      updateCell(row, col);\n    }\n  }\n});\n\ndocument.addEventListener('keydown', events => {\n  if (playGame) {\n    const pressedKey = events.key;\n\n    switch (pressedKey) {\n      case 'ArrowRight':\n        moveRight();\n        resetMergedCells();\n        youLose();\n        break;\n      case 'ArrowLeft':\n        moveLeft();\n        resetMergedCells();\n        youLose();\n        break;\n      case 'ArrowUp':\n        moveUp();\n        resetMergedCells();\n        youLose();\n        break;\n      case 'ArrowDown':\n        moveDown();\n        resetMergedCells();\n        youLose();\n        break;\n    };\n  }\n});\n\nfunction youLose() {\n  let canMove = false;\n\n  for (let row = 0; row < numFour; row++) {\n    for (let col = 0; col < numFour; col++) {\n      if (board[row][col] === 0) {\n        canMove = true;\n        break;\n      }\n    }\n\n    if (canMove) {\n      break;\n    }\n  }\n\n  if (!canMove) {\n    for (let row = 0; row < numFour; row++) {\n      for (let col = 0; col < numFour; col++) {\n        const current = board[row][col];\n\n        if (\n          (row > 0 && board[row - 1][col] === current)\n          || (row < numFour - 1 && board[row + 1][col] === current)\n          || (col > 0 && board[row][col - 1] === current)\n          || (col < numFour - 1 && board[row][col + 1] === current)\n        ) {\n          return;\n        }\n      }\n    }\n    messageLose.classList.remove('hidden');\n  }\n}\n"]}